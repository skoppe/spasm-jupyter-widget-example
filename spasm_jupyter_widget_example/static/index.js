define(["@jupyter-widgets/base"], function(__WEBPACK_EXTERNAL_MODULE_3__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spasm", function() { return spasm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encoders", function() { return encoders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decoders", function() { return decoders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "jsExports", function() { return jsExports; });
// File is autogenerated with `dub run spasm:bootstrap-webpack`
const abort = (what,file,line) => {
    throw `ABORT: $what @ $file:$line`;
}

const utf8Decoder = new TextDecoder('utf-8');
const utf8Encoder = new TextEncoder();

let objects = {1: document, 2: window};
let freelist = [];
let addObject = (value) => {
        if (value === null || value == undefined) return 0;
        let idx = freelist.pop() || ++spasm.lastPtr;
        objects[idx] = value;
        return idx;
    },
    getObject = (ptr) => objects[ptr];
const setupMemory = (memory) => {
    spasm.memory = memory;
    spasm.buffer = memory.buffer;
}
const baseUrl = document.querySelector('body').getAttribute('data-base-url') + 'nbextensions/spasm_jupyter_widget_example';

const spasm = {
    lastPtr: 2,
    instance: null,
    init: (modules) => {
        window.spasm = spasm
        console.log(modules)
        if (!spasm.exports) {
            var tmp = {};
            modules.map(m=>m.jsExports).filter(a=>!!a).map(e=>Object.entries(e).forEach(e=>tmp[e[0]] = Object.assign.apply(null,[tmp[e[0]] || {}, e[1]])));
            spasm.exports = tmp;
        }
        return fetch(baseUrl+'/spasm_jupyter_widget_example.wasm')
            .then(request => request.arrayBuffer())
            // .then(bytes => WebAssembly.compile(bytes))
            .then(module => new WebAssembly.instantiate(module, spasm.exports))
            .then(result => result.instance)
            .then(instance => {
                console.log(instance)
                spasm.instance = instance
                setupMemory(instance.exports.memory);
                instance.exports._start(instance.exports.__heap_base);
            });
    },
    objects,
    addObject: addObject,
}

let encoders = {
    string: (ptr, val) => {
        const encodedString = utf8Encoder.encode(val);
        const wasmPtr = spasm.instance.exports.allocString(encodedString.length);
        const asBytes = new Uint8Array(spasm.memory.buffer, wasmPtr, encodedString.length);
        const heapi32u = new Uint32Array(spasm.memory.buffer)
        heapi32u[ptr / 4] = encodedString.length;
        heapi32u[(ptr / 4)+1] = wasmPtr;
        asBytes.set(encodedString);
        return ptr;
    }
}
let decoders = {
    string: (len, offset) => {
        if (offset == null) {
            const heapi32u = new Uint32Array(spasm.memory.buffer)
            offset = heapi32u[(len+4)/4];
            len = heapi32u[(len/4)];
        }
        return utf8Decoder.decode(new DataView(spasm.memory.buffer,offset,len));
    }
}
let jsExports = {
    env: {
        onOutOfMemoryError: () => abort("Out of memory exception"),
        _d_assert: (file,line) => abort("assert",file,line),
        doLog: arg => console.log(arg),
        memory: spasm.memory,
        __assert: () => {},
        _Unwind_Resume: () => {
            console.log(arguments);
        },
        _d_dynamic_cast: () => {
            console.log(arguments)
        },
        spasm_add__bool: (b)=>addObject(!!b),
        spasm_add__int: addObject,
        spasm_add__uint: addObject,
        spasm_add__long: addObject,
        spasm_add__ulong: addObject,
        spasm_add__short: addObject,
        spasm_add__ushort: addObject,
        spasm_add__byte: addObject,
        spasm_add__ubyte: addObject,
        spasm_add__float: addObject,
        spasm_add__double: addObject,
        spasm_add__object: () => addObject({}),
        spasm_add__string: (len, offset) => {
            return addObject(decoders.string(len, offset));
        },
        spasm_get__field: (handle, len, offset) => {
            return addObject(getObject(handle)[decoders.string(len,offset)]);
        },
        spasm_get__int: getObject,
        spasm_get__uint: getObject,
        spasm_get__long: getObject,
        spasm_get__ulong: getObject,
        spasm_get__short: getObject,
        spasm_get__ushort: getObject,
        spasm_get__float: getObject,
        spasm_get__double: getObject,
        spasm_get__byte: getObject,
        spasm_get__ubyte: getObject,
        spasm_get__string: (rawResult, ptr) => {
            encoders.string(rawResult, getObject(ptr));
        },
        spasm_removeObject: (ctx) => {
            freelist.push(ctx)
            delete objects[ctx]
        },
        DataView_Create: (len, offset) => {
            return addObject(new DataView(spasm.memory.buffer, offset, len));
        },
        Float32Array_Create: (len, offset) => {
            return addObject(new Float32Array(spasm.memory.buffer, offset, len));
        },
        Uint8Array_Create: (len, offset) => {
            return addObject(new Uint8Array(spasm.memory.buffer, offset, len));
        }
    }
};




/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

// Export widget models and views, and the npm package version number.
module.exports = __webpack_require__(2);
module.exports['version'] = __webpack_require__(6).version;


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__spasm_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__spa_js__ = __webpack_require__(4);
var widgets = __webpack_require__(3);



const spasm = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["spasm"];

const HelloModel = widgets.DOMWidgetModel.extend({
    defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {
        _model_name : 'HelloModel',
        _view_name : 'HelloView',
        _model_module : 'spasm_jupyter_widget_example',
        _view_module : 'spasm_jupyter_widget_example',
        _model_module_version : '0.1.0',
        _view_module_version : '0.1.0',
        value: 3
    })
});
/* harmony export (immutable) */ __webpack_exports__["HelloModel"] = HelloModel;


const modelExports = {
    env: {
        getModelInt: (ptr, len, off) => {
            return spasm.objects[ptr].get(__WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(len,off));
        },
        setModelInt: (ptr, len, off, value) => {
            spasm.objects[ptr].set(__WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(len, off), value);
        },
        saveChanges: (ptr) => {
            spasm.objects[ptr].save_changes();
        },
        onModelChange: (ptr, len, off, cbCtx, cbPtr) => {
            spasm.objects[ptr].on(__WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(len,off), ()=>spasm.instance.exports.__indirect_function_table.get(cbPtr)(cbCtx));
        }
    }
}

const HelloView = widgets.DOMWidgetView.extend({
    render: function() {
        // NOTE: spasm by default comes with a getRoot function that behaves as a singleton
        // we have to override it to ensure spasm renders itself inside this widget's dom element
        const customGetRoot = () => spasm.addObject(this.el);
        const patchedSpaModule = {
            jsExports: {
                env: Object.assign(
                    {},
                    __WEBPACK_IMPORTED_MODULE_1__spa_js__["a" /* jsExports */].env,
                    modelExports.env,
                    {getRoot: customGetRoot, getModel: () => spasm.addObject(this.model)}
                )
            }
        };
        spasm.init([__WEBPACK_IMPORTED_MODULE_0__spasm_js__,patchedSpaModule])
    }
});
/* harmony export (immutable) */ __webpack_exports__["HelloView"] = HelloView;



/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export nodes */
/* unused harmony export addPtr */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return jsExports; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__spasm_js__ = __webpack_require__(0);
// File is autogenerated with `dub run spasm:bootstrap-webpack`


let spasm = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["spasm"];
const nodes = spasm.objects;

const addPtr = spasm.addObject;
let tags = ["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","dfn","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","pre","progress","q","rb","rp","rt","rtc","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"];
const getTagFromType = (type) => {
    return tags[type];
}

let events = ['click','change','input','keydown','keyup','dblclick','blur','mousemove','mouseup','mousedown','keypress'];

let currentEvent= null;

const eventHandler = (event) => {
    const id = event.currentTarget.wasmId;
    const handlers = event.currentTarget.wasmEvents[event.type];
    const cbs = handlers.cbs;
    currentEvent = event;
    cbs.forEach(cb=>spasm.instance.exports.domEvent(id, cb.ctx, cb.fun, handlers.eventType));
    currentEvent = null;
}


let jsExports = {
    env: {
        appendChild: (parent, child) => {
            nodes[parent].appendChild(nodes[child]);
        },
        insertBefore: (parent, child, sibling) => {
            nodes[parent].insertBefore(nodes[child], nodes[sibling]);
        },
        addCss: (cssLen, cssOffset) => {
            var style = document.createElement('style');
            style.type = 'text/css';
            style.innerHTML = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(cssLen, cssOffset);
            document.getElementsByTagName('head')[0].appendChild(style);
            addPtr(style);
        },
        addClass: (node, classLen, classOffset) => {
            nodes[node].classList.add(__WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(classLen, classOffset));
        },
        removeClass: (node, classLen, classOffset) => {
            nodes[node].classList.remove(__WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(classLen, classOffset));
        },
        changeClass: (node, classLen, classOffset, on) => {
            if (on)
                nodes[node].classList.add(__WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(classLen, classOffset));
            else
                nodes[node].classList.remove(__WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(classLen, classOffset));
        },
        unmount: (childPtr) => {
            var child = nodes[childPtr];
            child.parentNode.removeChild(child);
        },
        removeChild: (childPtr) => {
            var child = nodes[childPtr];
            child.parentNode.removeChild(child);
            // TODO: we can reuse the child node (it is cheaper than recreating a new one...)
        },
        getRoot: () => {
            return addPtr(document.querySelector("#root"));
        },
        createElement: (type) => {
            return addPtr(document.createElement(getTagFromType(type)));
        },
        setSelectionRange: (nodePtr, start, end) => {
            nodes[nodePtr].setSelectionRange(start, end);
        },
        innerText: (nodePtr,textLen, textOffset) => {
            nodes[nodePtr].innerText = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(textLen,textOffset);
        },
        setAttributeInt: (node, attrLen, attrOffset, value) => {
            const attr = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(attrLen,attrOffset);
            nodes[node].setAttribute(attr, value);
        },
        setAttribute: (node, attrLen, attrOffset, valueLen, valueOffset) => {
            const attr = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(attrLen,attrOffset);
            const value = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(valueLen,valueOffset);
            nodes[node].setAttribute(attr, value);
        },
        addEventListener: (nodePtr, listenerType, ctx, fun, eventType) => {
            var listenerTypeStr = events[listenerType];
            var node = nodes[nodePtr];
            if (node.wasmEvents === undefined)
                var nodeEvents = node.wasmEvents = {};
            else
                var nodeEvents = nodes[nodePtr].wasmEvents;
            if (nodeEvents[listenerTypeStr] && nodeEvents[listenerTypeStr].cbs.length > 0) {
                nodeEvents[listenerTypeStr].cbs.push({ctx:ctx,fun:fun});
            } else {
                nodeEvents[listenerTypeStr] = {cbs:[{ctx: ctx, fun: fun}], eventType: eventType};
                node.addEventListener(listenerTypeStr, eventHandler);
            }
        },
        removeEventListener: (nodePtr, listenerType, ctx, fun, eventType) => {
            var listenerTypeStr = events[listenerType];
            var node = nodes[nodePtr];
            if (node.wasmEvents === undefined)
                return;
            var nodeEvents = nodes[nodePtr].wasmEvents;
            if (nodeEvents[listenerTypeStr] && nodeEvents[listenerTypeStr].cbs.length > 0) {
                nodeEvents[listenerTypeStr].cbs = nodeEvents[listenerTypeStr].cbs.filter(cb=>!(cb.ctx==ctx && cb.fun==fun));
            }
        },
        getEventBool: (propLen, propOffset) => {
            return !!currentEvent[__WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(propLen,propOffset)];
        },
        getEventInt: (propLen,propOffset) => {
            return 0+currentEvent[__WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(propLen,propOffset)];
        },
        getEventString: (resultRaw, propLen,propOffset) => {
            return __WEBPACK_IMPORTED_MODULE_0__spasm_js__["encoders"].string(resultRaw, currentEvent[__WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(propLen,propOffset)]);
        },
        setPropertyBool: (nodePtr, propLen, propOffset, value) => {
            const node = nodes[nodePtr];
            const prop = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(propLen, propOffset);
            if (node && node[prop] !== undefined)
                node[prop] = value;
        },
        setPropertyInt: (nodePtr, propLen, propOffset, value) => {
            jsExports.env.setPropertyBool(nodePtr, propLen, propOffset, value);
        },
        setProperty: (nodePtr, propLen, propOffset, valueLen, valueOffset) => {
            const node = nodes[nodePtr];
            const prop = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(propLen, propOffset);
            if (node && node[prop] !== undefined) {
                node[prop] = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(valueLen, valueOffset);
            }
        },
        getPropertyInt: (nodePtr, propLen, propOffset) => {
            const node = nodes[nodePtr];
            const prop = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(propLen, propOffset);
            if (!node || node[prop] === undefined)
                return false;
            return +node[prop];
        },
        getPropertyBool: (nodePtr, propLen, propOffset) => {
            const node = nodes[nodePtr];
            const prop = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(propLen, propOffset);
            if (!node || node[prop] === undefined)
                return false;
            return !!node[prop];
        },
        getProperty: (resultRaw, nodePtr, propLen, propOffset) => {
            const node = nodes[nodePtr];
            const prop = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(propLen, propOffset);
            if (!node || node[prop] === undefined)
                return __WEBPACK_IMPORTED_MODULE_0__spasm_js__["encoders"].string(resultRaw,"");
            return __WEBPACK_IMPORTED_MODULE_0__spasm_js__["encoders"].string(resultRaw,node[prop]);
        },
    }
}

if (process.env.NODE_ENV === 'development') {
    function reload() {
        const root = document.querySelector("#root");
        // TODO: how do we handle outstanding setTimeout or other schedule functions?
        // For now we assume the same callbacks will be available in the reloaded module
        // but that may not be the case.
        for(var i = spasm.lastPtr; i > 3; i--) {
            if (spasm.objects[i].remove)
                spasm.objects[i].remove();
            delete spasm.objects[i];
        }
        spasm.lastPtr = 2;
        spasm.init();
    }
    const ws = new WebSocket('ws://localhost:3001');
    ws.onmessage = function(event) {
        if (event.data === 'reload') {
            if (!spasm.instance.exports.dumpApp || !spasm.instance.exports.loadApp)
                return;
            spasm.instance.exports.dumpApp(0);
            var state = __WEBPACK_IMPORTED_MODULE_0__spasm_js__["decoders"].string(0);
            reload();
            setTimeout(()=>{
                __WEBPACK_IMPORTED_MODULE_0__spasm_js__["encoders"].string(0, state);
                const heapi32u = new Uint32Array(spasm.memory.buffer)
                spasm.instance.exports.loadApp(heapi32u[0], heapi32u[1]);
            }, 1);
        }
    }
}

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(5)))

/***/ }),
/* 5 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = {"name":"spasm_jupyter_widget_example","version":"0.1.0","description":"A Custom Jupyter Widget Library","author":"Sebastiaan Koppe","main":"lib/index.js","repository":{"type":"git","url":"https://github.com/skoppe/spasm_jupyter_widget_example.git"},"keywords":["jupyter","widgets","ipython","ipywidgets","jupyterlab-extension"],"files":["lib/**/*.js","dist/*.js"],"scripts":{"clean":"rimraf dist/","prepublish":"webpack","build":"webpack","watch":"webpack --watch --mode=development","test":"echo \"Error: no test specified\" && exit 1"},"devDependencies":{"webpack":"^3.5.5","rimraf":"^2.6.1"},"dependencies":{"@jupyter-widgets/base":"^1.1 || ^2"},"jupyterlab":{"extension":"lib/labplugin"}}

/***/ })
/******/ ])});;
//# sourceMappingURL=index.js.map